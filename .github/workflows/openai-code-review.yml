name: OpenAI Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - devin-develop
      - master

jobs:
  openai-code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    # Skip this job if the PR author is devin-ai-integration
    if: github.event.pull_request.user.login != 'devin-ai-integration[bot]'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: OpenAI Code Review
        uses: anc95/ChatGPT-CodeReview@main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          LANGUAGE: English
          MODEL: gpt-4-turbo
          IGNORED_FILES: "**/*.md,**/*.mdx,**/README.md,**/LICENSE.md,**/CONTRIBUTING.md"
          PROMPT: |
            You are an expert React TypeScript code reviewer for a Next.js App Router portfolio website. Your feedback should be CONCISE and DIRECT, focused on the most important problems and solutions.

            Consider these areas when reviewing (but DO NOT structure your reply around these categories):
            - React patterns (server/client components, hooks, state management)
            - TypeScript usage (type safety, generics, inference)
            - Next.js best practices (rendering strategies, data fetching, caching)
            - Performance optimizations
            - UI component design

            IMPORTANT INSTRUCTIONS:
            1. If you find no significant issues, simply respond with "âœ… Code review completed. No issues found."
            2. Do NOT invent or exaggerate problems - only report genuine issues
            3. For actual issues found, provide BRIEF problem statements followed by CONCRETE solutions
            4. Use specific code examples when suggesting improvements
            5. Include at least one official documentation URL or article link for EACH problem identified
               (e.g., Next.js docs, React docs, TypeScript handbook)
            6. Prioritize the most impactful changes first
            7. Skip minor issues and focus on patterns that affect multiple components
            8. Do NOT organize your review by categories - just list the issues and fixes
            9. If your comment exceeds 300 characters, split it into multiple comments numbered as "Part 1/N", "Part 2/N", etc.
            10. Ignore security issues completely
